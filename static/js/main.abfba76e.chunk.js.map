{"version":3,"sources":["Search.js","Results.js","Nominated.js","App.js","index.js"],"names":["Search","setTitle","setPage","Card","Header","Body","onChange","event","target","value","type","id","placeholder","className","style","width","ResultsPagination","page","data","items","push","Pagination","First","disabled","onClick","Prev","firstPage","Math","max","maxPage","ceil","totalResults","lastPage","min","number","Item","active","Next","Last","ResultsList","nominated","setNominated","ListGroup","variant","map","Row","Col","sm","Button","list","length","find","element","imdbID","size","name","Image","src","Poster","alt","height","rounded","Title","Year","Results","title","useState","setData","loading","setLoading","error","setError","useEffect","fetch","then","response","json","catch","console","log","JSON","stringify","Response","padding","Footer","NominatedList","movie","filter","Nominated","minHeight","App","saved","parse","localStorage","getItem","setItem","document","body","Container","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.abfba76e.chunk.js","sourcesContent":["import { Card } from \"react-bootstrap\";\n\nexport function Search({ setTitle, setPage }) {\n  // Set page to 1 for new search queries\n  const onChange = (event) => {\n    setTitle(event.target.value);\n    setPage(1);\n  };\n\n  return (\n    <div>\n      <Card>\n        {/* Title */}\n        <Card.Header>\n          <h5>Movie Title</h5>\n        </Card.Header>\n        {/* Search Bar */}\n        <Card.Body>\n          <input\n            onChange={onChange}\n            type=\"text\"\n            id=\"textInput\"\n            placeholder=\"Please search with 3+ characters...\"\n            className=\"w-100 p-3\"\n            style={{ width: \"100%\" }}\n          />\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n","import {\n  Pagination,\n  ListGroup,\n  Col,\n  Image,\n  Row,\n  Button,\n  Card,\n} from \"react-bootstrap\";\nimport { useState, useEffect } from \"react\";\n\n//Pagination for results page\nfunction ResultsPagination({ page, setPage, data }) {\n  //Initialize array\n  let items = [];\n  //First and previous buttons\n  items.push(\n    <Pagination.First\n      key=\"first\"\n      disabled={page === 1}\n      onClick={() => setPage(1)}\n    />\n  );\n  items.push(\n    <Pagination.Prev\n      key=\"previous\"\n      disabled={page === 1}\n      onClick={() => setPage(page - 1)}\n    />\n  );\n  //Calculate page numbers\n  var firstPage = Math.max(page - 2, 1);\n  var maxPage = Math.ceil(data.totalResults / 10);\n  var lastPage = Math.min(maxPage, firstPage + 4);\n  if (firstPage >= 2 && lastPage - page === 1) {\n    firstPage -= 1;\n  } else if (firstPage >= 3 && lastPage - page === 0) {\n    firstPage -= 2;\n  }\n  //Dynamically create numbered page buttons\n  for (let number = firstPage; number <= lastPage; number++) {\n    items.push(\n      <Pagination.Item\n        className=\"text-secondary\"\n        onClick={() => setPage(number)}\n        key={number}\n        active={number === page}\n      >\n        {number}\n      </Pagination.Item>\n    );\n  }\n  //Next and last buttons\n  items.push(\n    <Pagination.Next\n      key=\"next\"\n      disabled={page === maxPage}\n      onClick={() => setPage(page + 1)}\n    />\n  );\n  items.push(\n    <Pagination.Last\n      key=\"last\"\n      disabled={page === maxPage}\n      onClick={() => setPage(maxPage)}\n    />\n  );\n  return <Pagination>{items}</Pagination>;\n}\n\n//List of search results\nfunction ResultsList({ data, nominated, setNominated }) {\n  return (\n    <ListGroup variant=\"flush\">\n      {data.Search.map((data) => (\n        <ListGroup.Item key={data.imdbID}>\n          <Row className=\"align-items-center\">\n            {/* Nominate Buttons */}\n            <Col sm=\"auto\" style={{ width: \"auto\" }}>\n              <Button\n                // Add to list if list has space\n                onClick={() => {\n                  if (nominated.list.length < 5) {\n                    setNominated({ list: [...nominated.list, data] });\n                  }\n                }}\n                // Disabled if on list or if list is full\n                disabled={\n                  nominated.list.find(\n                    (element) => element.imdbID === data.imdbID\n                  ) || nominated.list.length >= 5\n                }\n                variant=\"secondary\"\n                size=\"sm\"\n                name=\"nominate\"\n                value={data}\n              >\n                Nominate\n              </Button>\n            </Col>\n            {/* Movie Poster */}\n            <Col sm=\"auto\" style={{ width: \"auto\" }}>\n              <Image\n                src={data.Poster}\n                alt=\"\"\n                style={{ height: \"40px\", width: \"27px\" }}\n                rounded\n              />\n            </Col>\n            {/* Movie Information */}\n            <Col>\n              {data.Title} ({data.Year})\n            </Col>\n          </Row>\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n}\n\nexport function Results({ title, page, setNominated, nominated, setPage }) {\n  //Initialize Variables\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  //API call\n  useEffect(() => {\n    if (!title) return;\n    if (title.length >= 3) {\n      setLoading(true);\n      fetch(\n        `https://www.omdbapi.com/?s=${title}&apikey=b29472dd&type=movie&page=${page}`\n      )\n        .then((response) => response.json())\n        .then(setData)\n        .then(() => setLoading(false))\n        .catch(setError);\n    }\n  }, [page, title]);\n  //Only search once search query is at least 3 characters\n  if (title.length < 3)\n    return (\n      <Card.Header>\n        <h5>Results</h5>\n      </Card.Header>\n    );\n  //Loading message\n  if (loading)\n    return (\n      <Card.Header>\n        <h5>Loading...</h5>\n      </Card.Header>\n    );\n  //Error Message\n  if (error) {\n    console.log(JSON.stringify(error, null, 2));\n    return (\n      <Card.Header>\n        <h5>Error! Please contact saahil.jaffer@uwaterloo.ca</h5>\n      </Card.Header>\n    );\n  }\n  //Fallback for lack of data\n  if (!data) return null;\n  //Fallback for no results\n  if (data.Response === \"False\")\n    return (\n      <Card.Header>\n        <h5>No results for \"{title}\"</h5>\n      </Card.Header>\n    );\n  return (\n    <div>\n      <Card.Header>\n        <Card.Title>Results for \"{title}\"</Card.Title>\n      </Card.Header>\n      <Card.Body style={{ padding: \"0\" }}>\n        <ResultsList\n          data={data}\n          nominated={nominated}\n          setNominated={setNominated}\n        />\n      </Card.Body>\n      <Card.Footer>\n        <Row className=\"justify-content-center\">\n          <ResultsPagination page={page} setPage={setPage} data={data} />\n        </Row>\n      </Card.Footer>\n    </div>\n  );\n}\n","import { ListGroup, Card, Row, Col, Button, Image } from \"react-bootstrap\";\n\nfunction NominatedList({ nominated, setNominated }) {\n  return (\n    <ListGroup variant=\"flush\">\n      {nominated.list.map((movie) => (\n        <ListGroup.Item key={movie.imdbID}>\n          <Row className=\"align-items-center\">\n            {/* Button */}\n            <Col sm=\"auto\" style={{ width: \"auto\" }}>\n              <Button\n                onClick={() =>\n                  setNominated({\n                    list: nominated.list.filter(\n                      (element) => element.imdbID !== movie.imdbID\n                    ),\n                  })\n                }\n                variant=\"secondary\"\n                size=\"sm\"\n                name=\"remove\"\n                value={movie.imdbID}\n              >\n                Remove\n              </Button>\n            </Col>\n            {/* Movie Poster */}\n            <Col sm=\"auto\" style={{ width: \"auto\" }}>\n              <Image\n                src={movie.Poster}\n                alt=\"\"\n                style={{ height: \"40px\", width: \"27px\" }}\n                rounded\n              />\n            </Col>\n            {/* Movie Information */}\n            <Col>\n              {movie.Title} ({movie.Year})\n            </Col>\n          </Row>\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n}\n\nexport function Nominated({ nominated, setNominated }) {\n  return (\n    <>\n      <Card>\n        <Card.Header>\n          <h5>Nominations</h5>\n        </Card.Header>\n        <Card.Body style={{ minHeight: \"0\", padding: \"0\" }}>\n          <NominatedList nominated={nominated} setNominated={setNominated} />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Col, Row, Card } from \"react-bootstrap\";\nimport { Search } from \"./Search.js\";\nimport { Results } from \"./Results.js\";\nimport { Nominated } from \"./Nominated.js\";\n\nfunction App() {\n  //Initialize Variables\n  const [title, setTitle] = useState(\"\");\n  const [page, setPage] = useState(1);\n  //Retrieve nominated list from local storage\n  const saved = JSON.parse(localStorage.getItem(\"nominated\"));\n  const [nominated, setNominated] = useState(saved || { list: [] });\n  //Update local storage when nominated list changes\n  useEffect(() => {\n    localStorage.setItem(\"nominated\", JSON.stringify(nominated));\n  }, [nominated]);\n  //Change background colour\n  document.body.style = \"background: #E9E9EC;\";\n  //Base app\n  return (\n    <>\n      <Container>\n        {/* Search */}\n        <Row>\n          <Col className=\"py-3\">\n            <h2>The Shoppies</h2>\n            <Search setTitle={setTitle} setPage={setPage} />\n          </Col>\n        </Row>\n        <Row>\n          {/* Results */}\n          <Col className=\"py-3\">\n            <Card className=\"w-100\">\n              <Results\n                title={title}\n                page={page}\n                setPage={setPage}\n                setNominated={setNominated}\n                nominated={nominated}\n              />\n            </Card>\n          </Col>\n          {/* For responsiveness */}\n          <div className=\"d-md-none w-100\"></div>\n          {/* Nominated List */}\n          <Col className=\"py-3\">\n            <Nominated nominated={nominated} setNominated={setNominated} />\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}