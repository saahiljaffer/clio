{"version":3,"sources":["App.js","index.js"],"names":["Search","setTitle","setPage","Card","Header","Body","onChange","event","target","value","type","id","placeholder","className","style","width","Results","title","page","setNominated","nominated","useState","data","setData","loading","setLoading","error","setError","useEffect","length","fetch","then","response","json","catch","JSON","stringify","Response","Title","padding","ListGroup","variant","map","Item","action","Row","Col","sm","Button","onClick","list","disabled","includes","size","name","Year","imdbID","Footer","textAlign","totalResults","Nominated","minHeight","movie","md","filter","e","App","document","body","Container","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a758532d.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { Container, Col, Row, ListGroup, Card } from \"react-bootstrap\";\n\nfunction Search({ setTitle, setPage }) {\n  const onChange = (event) => {\n    setTitle(event.target.value);\n    setPage(1);\n  };\n\n  return (\n    <div>\n      <Card>\n        <Card.Header>\n          <h5>Movie Title</h5>\n        </Card.Header>\n        <Card.Body>\n          <input\n            onChange={onChange}\n            type=\"text\"\n            id=\"textInput\"\n            placeholder=\"Please enter a search query with 3+ characters\"\n            className=\"w-100 p-3\"\n            style={{ width: \"100%\" }}\n          />\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nfunction Results({ title, page, setNominated, nominated, setPage }) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!title) return;\n    if (title.length >= 3) {\n      setLoading(true);\n      fetch(\n        `https://www.omdbapi.com/?s=${title}&apikey=b29472dd&type=movie&page=${page}`\n      )\n        .then((response) => response.json())\n        .then(setData)\n        .then(() => setLoading(false))\n        .catch(setError);\n    }\n  }, [page, title]);\n\n  if (title.length < 3)\n    return (\n      <Card.Header>\n        <h5>Results</h5>\n      </Card.Header>\n    );\n\n  if (loading)\n    return (\n      <Card.Header>\n        <h5>Loading...</h5>\n      </Card.Header>\n    );\n\n  if (error) return <pre>{JSON.stringify(error, null, 2)}</pre>;\n\n  if (!data) return null;\n\n  if (data.Response === \"False\")\n    return (\n      <Card.Header>\n        <h5>No results for \"{title}\"</h5>\n      </Card.Header>\n    );\n\n  return (\n    <div>\n      <Card.Header>\n        <Card.Title>Results for \"{title}\"</Card.Title>\n      </Card.Header>\n      <Card.Body style={{ padding: \"0\" }}>\n        <ListGroup variant=\"flush\">\n          {data.Search.map((data) => (\n            <ListGroup.Item action variant=\"light\" key={data.imdbID}>\n              <Row className=\"align-items-center\">\n                <Col sm=\"auto\" style={{ width: \"auto\" }}>\n                  <Button\n                    onClick={() => {\n                      if (nominated.list.length < 5) {\n                        setNominated({ list: [...nominated.list, data] });\n                      }\n                    }}\n                    disabled={\n                      nominated.list.includes(data) ||\n                      nominated.list.length >= 5\n                    }\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    name=\"nominate\"\n                    value={data}\n                  >\n                    Nominate\n                  </Button>\n                </Col>\n                <Col>\n                  {data.Title} ({data.Year})\n                </Col>\n              </Row>\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      </Card.Body>\n\n      <Card.Footer>\n        <Row>\n          <Col style={{ textAlign: \"center\" }}>\n            <Button\n              style={{ textAlign: \"center\" }}\n              size=\"sm\"\n              variant=\"secondary\"\n              disabled={page >= data.totalResults / 10}\n              onClick={() => setPage(page + 1)}\n            >\n              Next Page\n            </Button>\n          </Col>\n        </Row>\n      </Card.Footer>\n    </div>\n  );\n}\n\nfunction Nominated({ nominated, setNominated }) {\n  return (\n    <>\n      <Card>\n        <Card.Header>\n          <h5>Nominations</h5>\n        </Card.Header>\n        <Card.Body style={{ minHeight: \"0\", padding: \"0\" }}>\n          <ListGroup variant=\"flush\">\n            {nominated.list.map((movie) => (\n              <ListGroup.Item action variant=\"light\" key={movie.imdbID}>\n                <Row className=\"align-items-center\">\n                  <Col md=\"auto\">\n                    <Button\n                      onClick={() =>\n                        setNominated({\n                          list: nominated.list.filter((e) => e !== movie),\n                        })\n                      }\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      name=\"remove\"\n                      value={movie.imdbID}\n                    >\n                      Remove\n                    </Button>\n                  </Col>\n                  <Col>\n                    {movie.Title} ({movie.Year})\n                  </Col>\n                </Row>\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n\nfunction App() {\n  const [title, setTitle] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [nominated, setNominated] = useState({ list: [] });\n\n  document.body.style = \"background: #E9E9EC;\";\n\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col className=\"py-3\">\n            <h2>The Shoppies</h2>\n            <Search setTitle={setTitle} setPage={setPage} />\n          </Col>\n        </Row>\n        <Row>\n          {/* <CardGroup className=\"w-100\"> */}\n          <Col className=\"py-3\">\n            <Card className=\"w-100\">\n              {/* TODO: think about using cards */}\n              <Results\n                title={title}\n                page={page}\n                setPage={setPage}\n                setNominated={setNominated}\n                nominated={nominated}\n              />\n            </Card>\n          </Col>\n          <div className=\"d-md-none w-100\"></div>\n          <Col className=\"py-3\">\n            <Nominated nominated={nominated} setNominated={setNominated} />\n          </Col>\n          {/* </CardGroup> */}\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}